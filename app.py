import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import pydeck as pdk


from park_coordinates import PARK_COORDINATES, create_map_data

st.set_page_config(
    page_title="Park PM2.5 in BKK Dashboard",
    # page_icon="",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    st.title(" PM2.5 Analysis Dashboard - ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø")
    st.markdown("‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£")
    
    show_park_report()

def show_park_report():
    st.header("üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå PM2.5 ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø")
    st.markdown("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")
    
    # Load AllParkYear.csv
    try:
        df = pd.read_csv("Group_file/AllParkYear.csv")
    except FileNotFoundError:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå AllParkYear.csv ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Group_file")
        return
    
    # Data preprocessing
    df_processed = preprocess_park_data(df)
    
    if df_processed.empty:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # Filters in sidebar
    st.sidebar.header("Filter")
    
    # Location filter
    available_locations = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + sorted(df_processed['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'].unique().tolist())
    selected_location = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
        available_locations
    )
    
    # Year filter
    available_years = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + [str(year) for year in sorted(df_processed['‡∏õ‡∏µ'].unique().tolist())]
    selected_year = st.sidebar.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ",
        available_years
    )
    
    # Month filter
    months_thai = {
        'jan': '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', 'feb': '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', 'mar': '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
        'apr': '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', 'may': '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', 'jun': '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
        'jul': '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', 'aug': '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', 'sep': '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
        'oct': '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', 'nov': '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', 'dec': '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    }
    
    available_months = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(months_thai.values())
    selected_month = st.sidebar.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        available_months
    )
    
    filtered_df = filter_park_data(df_processed, selected_location, selected_year, selected_month)
    
    if filtered_df.empty:
        st.warning("‚ö†Ô∏è‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return
    
    show_park_metrics(filtered_df)
    
    show_park_visualizations(filtered_df, selected_location, selected_year, selected_month)
    
    show_park_data_table(filtered_df)

def preprocess_park_data(df):
    """Preprocess park data for analysis"""
    try:
        # Clean data
        df_clean = df.copy()
        
        # Convert to long format for easier analysis
        data_rows = []
        
        months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 
                 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
        
        months_thai = {
            'jan': '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', 'feb': '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', 'mar': '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
            'apr': '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', 'may': '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', 'jun': '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
            'jul': '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', 'aug': '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', 'sep': '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
            'oct': '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', 'nov': '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', 'dec': '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
        }
        
        for _, row in df_clean.iterrows():
            location = row['Dis_trict']
            year = int(row['‡∏õ‡∏µ'])
            
            for month in months:
                try:
                    lowest = float(row[f'{month}_lowest_PM2.5']) if pd.notnull(row[f'{month}_lowest_PM2.5']) else 0
                    highest = float(row[f'{month}_highest_PM2.5']) if pd.notnull(row[f'{month}_highest_PM2.5']) else 0
                    average = float(row[f'{month}_average_PM2.5']) if pd.notnull(row[f'{month}_average_PM2.5']) else 0
                    exceeding = float(row[f'{month}_day_exceeding_month']) if pd.notnull(row[f'{month}_day_exceeding_month']) else 0
                    
                    data_rows.append({
                        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà': location,
                        '‡∏õ‡∏µ': year,
                        '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': months_thai[month],
                        '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©': month,
                        '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î': lowest,
                        '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î': highest,
                        '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': average,
                        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô': exceeding
                    })
                except (ValueError, TypeError):
                    # Skip problematic data
                    continue
        
        return pd.DataFrame(data_rows)
    
    except Exception as e:
        st.error(f"Error processing data: {str(e)}")
        return pd.DataFrame()

def filter_park_data(df, location, year, month):
    """Filter park data based on user selections"""
    filtered = df.copy()
    
    if location != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered = filtered[filtered['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'] == location]
    
    if year != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        year_int = int(year)
        filtered = filtered[filtered['‡∏õ‡∏µ'] == year_int]
    
    if month != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered = filtered[filtered['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] == month]
    
    return filtered

def show_park_metrics(df):
    """Display summary metrics"""
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°")
    
    col1, col2, col3, col4 = st.columns(4)
    
    try:
        with col1:
            avg_pm25 = pd.to_numeric(df['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], errors='coerce').mean()
            st.metric("PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_pm25:.1f} Œºg/m¬≥" if not pd.isna(avg_pm25) else "N/A")
        
        with col2:
            max_pm25 = pd.to_numeric(df['‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'], errors='coerce').max()
            st.metric("‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_pm25:.1f} Œºg/m¬≥" if not pd.isna(max_pm25) else "N/A")
        
        with col3:
            total_exceeding = pd.to_numeric(df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô'], errors='coerce').sum()
            st.metric("üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", f"{total_exceeding:.0f} ‡∏ß‡∏±‡∏ô" if not pd.isna(total_exceeding) else "N/A")
        
        with col4:
            locations_count = df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'].nunique()
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", f"{locations_count} ‡πÅ‡∏´‡πà‡∏á")
            
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {str(e)}")

def show_park_visualizations(df, location, year, month):
    """Display park visualizations"""
    st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    # Create tabs for different visualizations
    tab1, tab2, tab3, tab4, tab5,tab6 = st.tabs([
        "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5", 
        "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
        "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", 
        "Box Plot ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", 
        "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
        "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
    ])
    
    with tab1:
        try:
            # Average PM2.5 by location
            if location == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
                df_numeric = df.copy()
                df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'] = pd.to_numeric(df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], errors='coerce')
                
                avg_by_location = df_numeric.groupby('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'].mean().reset_index()
                avg_by_location = avg_by_location.dropna()
                avg_by_location = avg_by_location.sort_values('‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', ascending=True)
                
                if not avg_by_location.empty:
                    fig = px.bar(avg_by_location, 
                                x='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', 
                                y='‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                                title='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                                orientation='h',
                                color='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                                color_continuous_scale='RdYlGn_r')
                    fig.update_layout(height=600)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ")
            else:
                # Show monthly trend for selected location
                df_numeric = df.copy()
                df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'] = pd.to_numeric(df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], errors='coerce')
                
                monthly_data = df_numeric.groupby('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'].mean().reset_index()
                monthly_data = monthly_data.dropna()
                
                if not monthly_data.empty:
                    month_order = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                                  '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
                    monthly_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(monthly_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
                    monthly_data = monthly_data.sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
                    
                    fig = px.line(monthly_data, 
                                 x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 
                                 y='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                                 title=f'‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° PM2.5 ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - {location}',
                                 markers=True)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ")
        except Exception as e:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü: {str(e)}")
    
    with tab2:
        # Monthly trend comparison
        try:
            if len(df['‡∏õ‡∏µ'].unique()) > 1:
                df_numeric = df.copy()
                df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'] = pd.to_numeric(df_numeric['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], errors='coerce')
                
                monthly_trend = df_numeric.groupby(['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏õ‡∏µ'])['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'].mean().reset_index()
                monthly_trend = monthly_trend.dropna()
                
                month_order = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                              '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
                monthly_trend['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(monthly_trend['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
                monthly_trend = monthly_trend.sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
                
                fig = px.line(monthly_trend, 
                             x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 
                             y='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                             color='‡∏õ‡∏µ',
                             title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° PM2.5 ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ',
                             markers=True)
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°")
        except Exception as e:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: {str(e)}")
    
    with tab3:
        # Location comparison scatter plot
        try:
            if len(df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'].unique()) > 1:
                location_data = df.groupby('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà').agg({
                    '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': 'mean',
                    '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î': 'max',
                    '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î': 'min',
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô': 'sum'
                }).reset_index()
                
                # Convert to numeric
                for col in ['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô']:
                    location_data[col] = pd.to_numeric(location_data[col], errors='coerce')
                
                location_data = location_data.dropna()
                
                fig = px.scatter(location_data,
                               x='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                               y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
                               size='‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
                               hover_name='‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                               title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ vs ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
                               color='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                               color_continuous_scale='RdYlGn_r')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        except Exception as e:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: {str(e)}")
    
    with tab4:
        # Box Plot Analysis - NEW FEATURE
        try:
            st.subheader("Box Plot Analysis - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            
            # Create different box plot options
            box_option = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Box Plot:",
                ["PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ"]
            )
            
            df_numeric = df.copy()
            for col in ['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î']:
                df_numeric[col] = pd.to_numeric(df_numeric[col], errors='coerce')
            df_numeric = df_numeric.dropna(subset=['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'])
            
            if box_option == "PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà" and len(df_numeric['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'].unique()) > 1:
                fig = px.box(df_numeric, 
                            x='‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', 
                            y='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                            title='Box Plot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                            color='‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)
                
                # Statistical interpretation
                st.info("""
                **‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏° Box Plot:**
                - ‡∏Å‡∏•‡πà‡∏≠‡∏á (Box): ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≠‡πÑ‡∏ó‡∏•‡πå‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 3 (50% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                - ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (Median)
                - ‡∏´‡∏ô‡∏ß‡∏î (Whiskers): ‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
                - ‡∏à‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers)
                """)
                
            elif box_option == "PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                month_order = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                              '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
                df_numeric['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(df_numeric['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
                
                fig = px.box(df_numeric, 
                            x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 
                            y='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                            title='Box Plot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
                            color='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)
                
            elif box_option == "PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ" and len(df_numeric['‡∏õ‡∏µ'].unique()) > 1:
                fig = px.box(df_numeric, 
                            x='‡∏õ‡∏µ', 
                            y='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                            title='Box Plot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ',
                            color='‡∏õ‡∏µ')
                st.plotly_chart(fig, use_container_width=True)
                
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Box Plot ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
                
            # Additional box plot showing all three metrics
            st.subheader("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 (‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î, ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)")
            
            # Reshape data for multiple metrics comparison
            metrics_data = []
            for _, row in df_numeric.iterrows():
                metrics_data.extend([
                    {'‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà': row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'], '‡∏Ñ‡πà‡∏≤ PM2.5': row['‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î'], '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î'},
                    {'‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà': row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'], '‡∏Ñ‡πà‡∏≤ PM2.5': row['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'},
                    {'‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà': row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'], '‡∏Ñ‡πà‡∏≤ PM2.5': row['‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'], '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'}
                ])
            
            metrics_df = pd.DataFrame(metrics_data)
            
            if not metrics_df.empty:
                fig = px.box(metrics_df, 
                            x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 
                            y='‡∏Ñ‡πà‡∏≤ PM2.5',
                            title='Box Plot: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ',
                            color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
                st.plotly_chart(fig, use_container_width=True)
                
        except Exception as e:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Box Plot: {str(e)}")
    
    with tab5:
        # Exceeding days analysis
        try:
            df_numeric = df.copy()
            df_numeric['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô'] = pd.to_numeric(df_numeric['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô'], errors='coerce')
            
            exceeding_data = df_numeric.groupby(['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô'].sum().reset_index()
            exceeding_data = exceeding_data.dropna()
            
            month_order = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                          '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
            exceeding_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(exceeding_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
            exceeding_data = exceeding_data.sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
            
            fig = px.bar(exceeding_data,
                        x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
                        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
                        title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
                        color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
                        color_continuous_scale='Reds')
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: {str(e)}")
    with tab6:
            st.header("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df_map = create_map_data()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ß‡∏ô
            avg_pm = df.groupby("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].mean().reset_index()
            avg_pm.rename(columns={"‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": "pm25_avg"}, inplace=True)

    # ‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df_map = df_map.merge(avg_pm, left_on="name", right_on="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", how="left")

    # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö
      # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    def classify_risk(val):
        if pd.isna(val):
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        elif val <= 25:
            return "üü¢ ‡∏î‡∏µ"
        elif val <= 50:
            return "üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            return "üî¥ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"

    df_map["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"] = df_map["pm25_avg"].apply(classify_risk)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    st.dataframe(df_map[["name", "pm25_avg", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"]])

    # ‡πÉ‡∏ä‡πâ pydeck ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ

    color_map = {
        "üü¢ ‡∏î‡∏µ": [0, 200, 0],
        "üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": [255, 215, 0],
        "üî¥ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á": [255, 0, 0],
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": [200, 200, 200],
    }

    df_map["color"] = df_map["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"].apply(lambda x: color_map[x])

    layer = pdk.Layer(
        "ScatterplotLayer",
        data=df_map,
        get_position=["lon", "lat"],
        get_fill_color="color",
        get_radius=200,
        pickable=True,
    )

    view_state = pdk.ViewState(
        latitude=df_map["lat"].mean(),
        longitude=df_map["lon"].mean(),
        zoom=11
    )

    r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={"text": "{name}\n‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5: {pm25_avg:.1f}\n{‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á}"})
    st.pydeck_chart(r)

def show_park_data_table(df):
    """Display detailed data table"""
    st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    
    # Format the dataframe for display
    display_df = df.copy()
    display_df = display_df.round(1)
    
    # Add color coding for PM2.5 levels
    def color_pm25(val):
        if pd.isna(val):
            return ''
        elif val > 50:
            return 'background-color: #ffcccc'  # Light red for high levels
        elif val > 25:
            return 'background-color: #fff2cc'  # Light yellow for moderate levels
        else:
            return 'background-color: #ccffcc'  # Light green for good levels
    
    # Apply styling
    styled_df = display_df.style.applymap(color_pm25, subset=['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'])
    
    st.dataframe(styled_df, use_container_width=True)
    
    # Add download button
    csv = df.to_csv(index=False, encoding='utf-8-sig')
    st.download_button(
        label=" ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV",
        data=csv,
        file_name=f"PM25_Report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
        mime="text/csv"
    )
    
    # Add explanation
    st.info("""
    **‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:**
    - üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß: ‡∏Ñ‡πà‡∏≤ PM2.5 ‚â§ 25 Œºg/m¬≥ (‡∏î‡∏µ)
    - üü° ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á: ‡∏Ñ‡πà‡∏≤ PM2.5 26-50 Œºg/m¬≥ (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)  
    - üî¥ ‡πÅ‡∏î‡∏á: ‡∏Ñ‡πà‡∏≤ PM2.5 > 50 Œºg/m¬≥ (‡∏™‡∏π‡∏á)
    
    **‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® PM2.5:**
    - WHO ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15 Œºg/m¬≥ ‡∏ï‡πà‡∏≠‡∏õ‡∏µ
    - ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25 Œºg/m¬≥ ‡∏ï‡πà‡∏≠‡∏õ‡∏µ
    """)

if __name__ == "__main__":
    main()
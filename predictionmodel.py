# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.linear_model import LinearRegression
# from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
# from sklearn.svm import SVR
# from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# def show_forecast_page():
#     st.header("üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 4 ‡∏õ‡∏µ")
#     st.markdown("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AllParkYear.csv ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5 ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")

#     try:
#         df = pd.read_csv("Group_file/AllParkYear.csv")
#     except FileNotFoundError:
#         st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå AllParkYear.csv ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Group_file")
#         return

#     df_processed = preprocess_park_data(df)
#     if df_processed.empty:
#         st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
#         return

#     # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5 ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏ß‡∏ô)
#     df_yearly = df_processed.groupby("‡∏õ‡∏µ")["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].mean().reset_index()
#     df_yearly["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = pd.to_numeric(df_yearly["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"], errors="coerce")

#     st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5 ‡∏ï‡πà‡∏≠‡∏õ‡∏µ")
#     st.dataframe(df_yearly)

#     # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test
#     X = df_yearly[["‡∏õ‡∏µ"]]
#     y = df_yearly["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"]

#     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

#     scaler = StandardScaler()
#     X_train_scaled = scaler.fit_transform(X_train)
#     X_test_scaled = scaler.transform(X_test)

#     models = {
#         "Linear Regression": LinearRegression(),
#         "Random Forest": RandomForestRegressor(),
#         "Gradient Boosting": GradientBoostingRegressor(),
#         "SVM (RBF)": SVR(kernel="rbf")
#     }

#     results = []
#     future_preds = {}
#     last_year = int(df_yearly["‡∏õ‡∏µ"].max())
#     future_years = np.array([last_year + i for i in range(1, 5)]).reshape(-1, 1)
#     future_scaled = scaler.transform(future_years)

#     for name, model in models.items():
#         model.fit(X_train_scaled, y_train)
#         y_pred = model.predict(X_test_scaled)

#         r2 = r2_score(y_test, y_pred)
#         mae = mean_absolute_error(y_test, y_pred)
#         rmse = np.sqrt(mean_squared_error(y_test, y_pred))

#         results.append({
#             "Model": name,
#             "R¬≤ Score": r2,
#             "MAE": mae,
#             "RMSE": rmse
#         })

#         # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 4 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
#         future_preds[name] = model.predict(future_scaled)

#     st.subheader("‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• (Test 20%)")
#     results_df = pd.DataFrame(results).sort_values(by="R¬≤ Score", ascending=False)
#     st.dataframe(results_df, use_container_width=True)

#     st.subheader("‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 4 ‡∏õ‡∏µ")
#     forecast_df = pd.DataFrame({
#         "‡∏õ‡∏µ": [last_year + i for i in range(1, 5)]
#     })
#     for name, preds in future_preds.items():
#         forecast_df[name] = preds

#     st.dataframe(forecast_df, use_container_width=True)

#     # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
#     fig = px.line(forecast_df, x="‡∏õ‡∏µ", y=forecast_df.columns[1:], 
#                   title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ PM2.5 4 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤", markers=True)
#     st.plotly_chart(fig, use_container_width=True)